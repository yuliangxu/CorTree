// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// CorTree_sampler
Rcpp::List CorTree_sampler(arma::mat X, int n_clus, int tree_depth, int cutoff_layer, int total_iter, int burnin, int warm_start, Rcpp::Nullable<Rcpp::IntegerVector> init_Z, double c_sigma2_vec, double sigma_mu2, bool all_ind, int cov_interval);
RcppExport SEXP _CorTree_CorTree_sampler(SEXP XSEXP, SEXP n_clusSEXP, SEXP tree_depthSEXP, SEXP cutoff_layerSEXP, SEXP total_iterSEXP, SEXP burninSEXP, SEXP warm_startSEXP, SEXP init_ZSEXP, SEXP c_sigma2_vecSEXP, SEXP sigma_mu2SEXP, SEXP all_indSEXP, SEXP cov_intervalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type n_clus(n_clusSEXP);
    Rcpp::traits::input_parameter< int >::type tree_depth(tree_depthSEXP);
    Rcpp::traits::input_parameter< int >::type cutoff_layer(cutoff_layerSEXP);
    Rcpp::traits::input_parameter< int >::type total_iter(total_iterSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type warm_start(warm_startSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerVector> >::type init_Z(init_ZSEXP);
    Rcpp::traits::input_parameter< double >::type c_sigma2_vec(c_sigma2_vecSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_mu2(sigma_mu2SEXP);
    Rcpp::traits::input_parameter< bool >::type all_ind(all_indSEXP);
    Rcpp::traits::input_parameter< int >::type cov_interval(cov_intervalSEXP);
    rcpp_result_gen = Rcpp::wrap(CorTree_sampler(X, n_clus, tree_depth, cutoff_layer, total_iter, burnin, warm_start, init_Z, c_sigma2_vec, sigma_mu2, all_ind, cov_interval));
    return rcpp_result_gen;
END_RCPP
}
// construct_tree
Rcpp::List construct_tree(arma::mat& X, arma::uword tree_depth);
RcppExport SEXP _CorTree_construct_tree(SEXP XSEXP, SEXP tree_depthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type tree_depth(tree_depthSEXP);
    rcpp_result_gen = Rcpp::wrap(construct_tree(X, tree_depth));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_pgdraw
NumericVector rcpp_pgdraw(NumericVector b, NumericVector c);
RcppExport SEXP _CorTree_rcpp_pgdraw(SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_pgdraw(b, c));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CorTree_CorTree_sampler", (DL_FUNC) &_CorTree_CorTree_sampler, 12},
    {"_CorTree_construct_tree", (DL_FUNC) &_CorTree_construct_tree, 2},
    {"_CorTree_rcpp_pgdraw", (DL_FUNC) &_CorTree_rcpp_pgdraw, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_CorTree(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
